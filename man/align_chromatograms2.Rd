% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/align_chromatograms2.R
\name{align_chromatograms2}
\alias{align_chromatograms2}
\title{Aligning peaks based on retention times}
\usage{
align_chromatograms2(
  data2align,
  blanks = NULL,
  linear_shift_criteria,
  partial_alignment_threshold,
  row_merging_threshold
)
}
\arguments{
\item{data2align}{Data set containing peaks that need to be aligned and matched.}

\item{blanks}{Character vector of names of negative controls.}

\item{linear_shift_criteria}{Numeric value indicating the size range within the linear shift of peaks can
occur during the initial full alignment step.}

\item{partial_alignment_threshold}{Numeric value indicating the threshold for the partial peak alignment step.}

\item{row_merging_threshold}{Numeric value indicating the threshold for the merging rows step.}
}
\description{
Custom function for aligning chromatograms.
It is a wrapper around \link[GCalignR:align_chromatograms]{GCalignR::align_chromatograms} function, thus it is
recommended to check its documentation.

Its main purpose is to facilitate the usage of the
function with \link{lapply}, and within portable scripts.

It sets a seed before applying using \link[GCalignR:align_chromatograms]{GCalignR::align_chromatograms}.

The name of the alignment criteria parameters are more similar to their
description in the original paper on the GCalignR package.

rt_col_name is set to "RT" by default, as it is the name given by
\link{import_mh_data}.

If the given data set contain only one sample, it returns a list with a
similar structure to that of the typical \link[GCalignR:align_chromatograms]{GCalignR::align_chromatograms}
output. However, this list is not a GCalignR object.
}
\examples{

library(tidyr)

grouping_info <- grouping_info |>
  unite(group_label
        , where(is.factor)
        , sep = "_"
        , remove = FALSE)

# Nest the data frames in sublists by group
samples_data_list <- mg_list(sample.info = grouping_info
                             , group.label = "group_label"
                             , samples.data.list = samples_data_list)

# Aligning a single list of data frames
Winter_IW <- samples_data_list$`Winter_In-hive workers_A. m. mellifera`

aligned_samples_data_list <- Winter_IW |>
  align_chromatograms2(blanks = NULL
                       , linear_shift_criteria = 0.02
                       , partial_alignment_threshold = 0.05
                       , row_merging_threshold = 0.15)

# Using lapply to align all the data lists nested within a list
aligned_samples_data_list <- samples_data_list |>
  lapply(align_chromatograms2
         , blanks = NULL
         , linear_shift_criteria = 0.02
         , partial_alignment_threshold = 0.05
         , row_merging_threshold = 0.15)

# Parallelized alignment of several data group lists nested within a list
library(doParallel)

## Define the number of cores that will be used for the parallel processes
no_cores <- 2

## Set a processing cluster
cl <- makeCluster(no_cores)

## Register the processing cluster to be used for parallel operations
registerDoParallel(cl)

aligned_samples_data_list <- parLapply(cl
                                       , samples_data_list
                                       , align_chromatograms2
                                       , blanks = NULL
                                       , linear_shift_criteria = 0.02
                                       , partial_alignment_threshold = 0.05
                                       , row_merging_threshold = 0.15)

stopCluster(cl)
registerDoSEQ()

}
